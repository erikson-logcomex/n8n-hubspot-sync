{
  "name": "HubSpot → PostgreSQL - Sync Incremental (com Rate Limiting)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours", 
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "schedule-trigger-001",
      "name": "Schedule Trigger - A cada 2h",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [140, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE(MAX(lastmodifieddate), '1970-01-01'::timestamp) as last_sync_timestamp FROM contacts WHERE sync_status = 'active'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [360, 300],
      "id": "get-last-sync-002",
      "name": "Get Last Sync",
      "credentials": {
        "postgres": {
          "id": "tNfNIsNQktRTNMfJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [580, 300],
      "id": "rate-limit-delay-003",
      "name": "⏰ Rate Limit Delay"
    },
    {
      "parameters": {
        "url": "=https://api.hubapi.com/crm/v3/objects/contacts",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "hubspotAppToken",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "50"
            },
            {
              "name": "properties",
              "value": "email,firstname,lastname,company,jobtitle,website,phone,mobilephone,hs_whatsapp_phone_number,govcs_i_phone_number,lifecyclestage,hs_lead_status,codigo_do_voucher,atendimento_ativo_por,buscador_ncm,cnpj_da_empresa_pesquisada,contato_por_whatsapp,criado_whatsapp,whatsapp_api,whatsapp_error_spread_chat,hs_calculated_phone_number,hs_calculated_mobile_number,hs_calculated_phone_number_country_code,hs_calculated_phone_number_area_code,telefone_ravena_classificado__revops_,celular1_gerador_de_personas,celular2_gerador_de_personas,address,city,state,zip,country,createdate,lastmodifieddate,closedate,hs_lead_source,hs_original_source,hs_original_source_data_1,hs_original_source_data_2,hubspot_owner_id"
            },
            {
              "name": "filterGroups[0][filters][0][propertyName]",
              "value": "lastmodifieddate"
            },
            {
              "name": "filterGroups[0][filters][0][operator]",
              "value": "GTE"
            },
            {
              "name": "filterGroups[0][filters][0][value]",
              "value": "={{ new Date($('Get Last Sync').item.json.last_sync_timestamp).getTime() - 300000 }}"
            }
          ]
        },
        "options": {
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetween": 5000
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 300],
      "id": "hubspot-request-004",
      "name": "🌐 HubSpot API Request",
      "credentials": {
        "hubspotAppToken": {
          "id": "YwRTwETOCgfX3IpP",
          "name": "HubSpot App Token account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "has-results",
              "leftValue": "={{ $json.results && Array.isArray($json.results) && $json.results.length > 0 }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1020, 300],
      "id": "check-has-contacts-005",
      "name": "🔍 Tem Contatos?"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🛡️ Função para converter JsProxy para Python nativo\nfunction jsproxy_to_python(obj) {\n  if (obj === null || obj === undefined) return null;\n  \n  if (typeof obj === 'object') {\n    if (Array.isArray(obj)) {\n      return obj.map(item => jsproxy_to_python(item));\n    } else {\n      const result = {};\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          result[key] = jsproxy_to_python(obj[key]);\n        }\n      }\n      return result;\n    }\n  }\n  \n  return obj;\n}\n\n// 🔧 Função para escape SQL\nfunction escape_sql(value) {\n  if (value === null || value === undefined || value === '') return 'NULL';\n  if (typeof value === 'number') return value;\n  if (typeof value === 'boolean') return value;\n  \n  // Truncar strings muito longas e escapar aspas\n  let str = String(value);\n  if (str.length > 255) str = str.substring(0, 255);\n  return `'${str.replace(/'/g, \"''\")}'`;\n}\n\n// 📅 Função para converter timestamp\nfunction convert_timestamp(timestamp) {\n  if (!timestamp) return 'NULL';\n  try {\n    if (typeof timestamp === 'number') {\n      return `'${new Date(timestamp).toISOString()}'`;\n    }\n    if (typeof timestamp === 'string') {\n      return `'${new Date(timestamp).toISOString()}'`;\n    }\n    return 'NULL';\n  } catch (e) {\n    return 'NULL';\n  }\n}\n\n// 🧹 Função para limpar email\nfunction clean_email(email) {\n  if (!email || typeof email !== 'string') return null;\n  \n  // Remover espaços e converter para minúsculo\n  email = email.trim().toLowerCase();\n  \n  // Validação básica de email\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) return null;\n  \n  return email;\n}\n\n// 📊 Processar contatos para SQL\nconst contacts = $input.all();\nconst results = contacts.flatMap(item => {\n  const data = jsproxy_to_python(item.json);\n  \n  if (!data || !data.results) {\n    console.log('⚠️ Dados inválidos ou sem resultados');\n    return [];\n  }\n  \n  return data.results.map(contact => {\n    const props = contact.properties || {};\n    \n    // Limpar email\n    const cleaned_email = clean_email(props.email);\n    \n    const sql = `\n      INSERT INTO contacts (\n        id, hs_object_id, email, firstname, lastname, company, jobtitle, website,\n        phone, mobilephone, hs_whatsapp_phone_number, govcs_i_phone_number,\n        lifecyclestage, hs_lead_status, hubspot_owner_id, codigo_do_voucher,\n        atendimento_ativo_por, buscador_ncm, cnpj_da_empresa_pesquisada,\n        contato_por_whatsapp, criado_whatsapp, whatsapp_api, whatsapp_error_spread_chat,\n        hs_calculated_phone_number, hs_calculated_mobile_number,\n        hs_calculated_phone_number_country_code, hs_calculated_phone_number_area_code,\n        telefone_ravena_classificado__revops_, celular1_gerador_de_personas,\n        celular2_gerador_de_personas, address, city, state, zip, country,\n        createdate, lastmodifieddate, closedate, hs_lead_source, hs_original_source,\n        hs_original_source_data_1, hs_original_source_data_2, last_sync_date,\n        sync_status, hubspot_raw_data\n      ) VALUES (\n        ${escape_sql(contact.id)},\n        ${escape_sql(contact.id)},\n        ${escape_sql(cleaned_email)},\n        ${escape_sql(props.firstname)},\n        ${escape_sql(props.lastname)},\n        ${escape_sql(props.company)},\n        ${escape_sql(props.jobtitle)},\n        ${escape_sql(props.website)},\n        ${escape_sql(props.phone)},\n        ${escape_sql(props.mobilephone)},\n        ${escape_sql(props.hs_whatsapp_phone_number)},\n        ${escape_sql(props.govcs_i_phone_number)},\n        ${escape_sql(props.lifecyclestage)},\n        ${escape_sql(props.hs_lead_status)},\n        ${escape_sql(props.hubspot_owner_id)},\n        ${escape_sql(props.codigo_do_voucher)},\n        ${escape_sql(props.atendimento_ativo_por)},\n        ${escape_sql(props.buscador_ncm)},\n        ${escape_sql(props.cnpj_da_empresa_pesquisada)},\n        ${escape_sql(props.contato_por_whatsapp)},\n        ${escape_sql(props.criado_whatsapp)},\n        ${escape_sql(props.whatsapp_api)},\n        ${escape_sql(props.whatsapp_error_spread_chat)},\n        ${escape_sql(props.hs_calculated_phone_number)},\n        ${escape_sql(props.hs_calculated_mobile_number)},\n        ${escape_sql(props.hs_calculated_phone_number_country_code)},\n        ${escape_sql(props.hs_calculated_phone_number_area_code)},\n        ${escape_sql(props.telefone_ravena_classificado__revops_)},\n        ${escape_sql(props.celular1_gerador_de_personas)},\n        ${escape_sql(props.celular2_gerador_de_personas)},\n        ${escape_sql(props.address)},\n        ${escape_sql(props.city)},\n        ${escape_sql(props.state)},\n        ${escape_sql(props.zip)},\n        ${escape_sql(props.country)},\n        ${convert_timestamp(props.createdate)},\n        ${convert_timestamp(props.lastmodifieddate)},\n        ${convert_timestamp(props.closedate)},\n        ${escape_sql(props.hs_lead_source)},\n        ${escape_sql(props.hs_original_source)},\n        ${escape_sql(props.hs_original_source_data_1)},\n        ${escape_sql(props.hs_original_source_data_2)},\n        NOW(),\n        'active',\n        ${escape_sql(JSON.stringify(contact))}\n      )\n      ON CONFLICT (id) DO UPDATE SET\n        email = EXCLUDED.email,\n        firstname = EXCLUDED.firstname,\n        lastname = EXCLUDED.lastname,\n        company = EXCLUDED.company,\n        jobtitle = EXCLUDED.jobtitle,\n        website = EXCLUDED.website,\n        phone = EXCLUDED.phone,\n        mobilephone = EXCLUDED.mobilephone,\n        hs_whatsapp_phone_number = EXCLUDED.hs_whatsapp_phone_number,\n        govcs_i_phone_number = EXCLUDED.govcs_i_phone_number,\n        lifecyclestage = EXCLUDED.lifecyclestage,\n        hs_lead_status = EXCLUDED.hs_lead_status,\n        hubspot_owner_id = EXCLUDED.hubspot_owner_id,\n        codigo_do_voucher = EXCLUDED.codigo_do_voucher,\n        atendimento_ativo_por = EXCLUDED.atendimento_ativo_por,\n        buscador_ncm = EXCLUDED.buscador_ncm,\n        cnpj_da_empresa_pesquisada = EXCLUDED.cnpj_da_empresa_pesquisada,\n        contato_por_whatsapp = EXCLUDED.contato_por_whatsapp,\n        criado_whatsapp = EXCLUDED.criado_whatsapp,\n        whatsapp_api = EXCLUDED.whatsapp_api,\n        whatsapp_error_spread_chat = EXCLUDED.whatsapp_error_spread_chat,\n        hs_calculated_phone_number = EXCLUDED.hs_calculated_phone_number,\n        hs_calculated_mobile_number = EXCLUDED.hs_calculated_mobile_number,\n        hs_calculated_phone_number_country_code = EXCLUDED.hs_calculated_phone_number_country_code,\n        hs_calculated_phone_number_area_code = EXCLUDED.hs_calculated_phone_number_area_code,\n        telefone_ravena_classificado__revops_ = EXCLUDED.telefone_ravena_classificado__revops_,\n        celular1_gerador_de_personas = EXCLUDED.celular1_gerador_de_personas,\n        celular2_gerador_de_personas = EXCLUDED.celular2_gerador_de_personas,\n        address = EXCLUDED.address,\n        city = EXCLUDED.city,\n        state = EXCLUDED.state,\n        zip = EXCLUDED.zip,\n        country = EXCLUDED.country,\n        createdate = EXCLUDED.createdate,\n        lastmodifieddate = EXCLUDED.lastmodifieddate,\n        closedate = EXCLUDED.closedate,\n        hs_lead_source = EXCLUDED.hs_lead_source,\n        hs_original_source = EXCLUDED.hs_original_source,\n        hs_original_source_data_1 = EXCLUDED.hs_original_source_data_1,\n        hs_original_source_data_2 = EXCLUDED.hs_original_source_data_2,\n        last_sync_date = NOW(),\n        sync_status = EXCLUDED.sync_status,\n        hubspot_raw_data = EXCLUDED.hubspot_raw_data;\n    `;\n    \n    return { query: sql.trim() };\n  });\n});\n\nconsole.log(`🔧 Geradas ${results.length} queries SQL para UPSERT`);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 200],
      "id": "generate-sql-006",
      "name": "⚙️ Generate SQL UPSERT"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "seconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1460, 200],
      "id": "sql-delay-007",
      "name": "⏰ SQL Delay"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1680, 200],
      "id": "execute-sql-008",
      "name": "🗄️ Execute SQL",
      "credentials": {
        "postgres": {
          "id": "tNfNIsNQktRTNMfJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const items = $input.all();\nconst successCount = items.length;\nconst timestamp = new Date().toISOString();\n\nconsole.log(`✅ [CONTACTS SYNC] ${successCount} contatos sincronizados com sucesso`);\nconsole.log(`⏰ [CONTACTS SYNC] Próxima execução em 2 horas`);\n\nreturn [{\n  json: {\n    sync_type: 'incremental',\n    timestamp: timestamp,\n    contacts_processed: successCount,\n    status: 'success',\n    next_run: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 200],
      "id": "log-success-009",
      "name": "✅ Log Success"
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const timestamp = new Date().toISOString();\n\nconsole.log('ℹ️ [CONTACTS SYNC] Nenhum contato modificado encontrado desde último sync');\nconsole.log('⏰ [CONTACTS SYNC] Próxima verificação em 2 horas');\n\nreturn [{\n  json: {\n    sync_type: 'incremental',\n    timestamp: timestamp,\n    contacts_processed: 0,\n    status: 'no_changes',\n    next_run: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 400],
      "id": "log-no-changes-010",
      "name": "ℹ️ Log No Changes"
    }
  ],
  "connections": {
    "Schedule Trigger - A cada 2h": {
      "main": [[{"node": "Get Last Sync", "type": "main", "index": 0}]]
    },
    "Get Last Sync": {
      "main": [[{"node": "⏰ Rate Limit Delay", "type": "main", "index": 0}]]
    },
    "⏰ Rate Limit Delay": {
      "main": [[{"node": "🌐 HubSpot API Request", "type": "main", "index": 0}]]
    },
    "🌐 HubSpot API Request": {
      "main": [[{"node": "🔍 Tem Contatos?", "type": "main", "index": 0}]]
    },
    "🔍 Tem Contatos?": {
      "main": [
        [{"node": "⚙️ Generate SQL UPSERT", "type": "main", "index": 0}],
        [{"node": "ℹ️ Log No Changes", "type": "main", "index": 0}]
      ]
    },
    "⚙️ Generate SQL UPSERT": {
      "main": [[{"node": "⏰ SQL Delay", "type": "main", "index": 0}]]
    },
    "⏰ SQL Delay": {
      "main": [[{"node": "🗄️ Execute SQL", "type": "main", "index": 0}]]
    },
    "🗄️ Execute SQL": {
      "main": [[{"node": "✅ Log Success", "type": "main", "index": 0}]]
    }
  },
  "settings": {"executionOrder": "v1"},
  "staticData": null,
  "tags": ["hubspot", "postgresql", "sync", "incremental", "rate-limited"],
  "triggerCount": 0,
  "updatedAt": "2025-08-26T15:00:00.000Z",
  "versionId": "3"
}

