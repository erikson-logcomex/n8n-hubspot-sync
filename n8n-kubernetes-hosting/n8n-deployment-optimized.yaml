# n8n Main Deployment - Otimizado para e2-standard-4
# Plano: 2 réplicas, 250m CPU, 512Mi RAM cada
# Node Selector: pool-cpu4 (e2-standard-4)

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: n8n
  name: n8n
  namespace: n8n
spec:
  replicas: 2  # 2 réplicas conforme plano
  selector:
    matchLabels:
      service: n8n
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        service: n8n
    spec:
      # Node Selector para e2-standard-4
      nodeSelector:
        cloud.google.com/gke-nodepool: pool-cpu4
      containers:
        - args:
            - start
          command:
            - n8n
          env:
            # PostgreSQL Configuration
            - name: DB_TYPE
              value: postgresdb
            - name: DB_POSTGRESDB_HOST
              value: 172.23.64.3
            - name: DB_POSTGRESDB_PORT
              value: "5432"
            - name: DB_POSTGRESDB_DATABASE
              value: n8n-postgres-db
            - name: DB_POSTGRESDB_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_NON_ROOT_USER
                  name: postgres-secret
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_NON_ROOT_PASSWORD
                  name: postgres-secret
            - name: DB_POSTGRESDB_CONNECTION_TIMEOUT
              value: "120000"
            - name: DB_POSTGRESDB_POOL_SIZE
              value: "2"
            - name: DB_POSTGRESDB_IDLE_CONNECTION_TIMEOUT
              value: "60000"
            
            # Redis Configuration (via DNS)
            - name: N8N_REDIS_HOST
              value: redis-master.n8n.svc.cluster.local
            - name: N8N_REDIS_PORT
              value: "6379"
            - name: N8N_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: REDIS_PASSWORD
                  name: redis-auth
            - name: QUEUE_BULL_REDIS_HOST
              value: redis-master.n8n.svc.cluster.local
            - name: QUEUE_BULL_REDIS_PORT
              value: "6379"
            - name: QUEUE_BULL_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: REDIS_PASSWORD
                  name: redis-auth
            - name: QUEUE_BULL_REDIS_DB
              value: "0"
            
            # n8n Configuration
            - name: N8N_PROTOCOL
              value: https
            - name: N8N_HOST
              value: n8n-logcomex.34-8-101-220.nip.io
            - name: N8N_SECURE_COOKIE
              value: "true"
            - name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
              value: "true"
            - name: N8N_TRUSTED_PROXIES
              value: redis-master.n8n.svc.cluster.local
            
            # Execution Mode
            - name: EXECUTIONS_MODE
              value: queue
            - name: N8N_EXECUTIONS_MODE
              value: queue
            - name: N8N_RUNNERS_ENABLED
              value: "true"
            - name: OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS
              value: "true"
            
            # Security
            - name: N8N_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  key: N8N_ENCRYPTION_KEY
                  name: n8n-encryption
            
            # Webhooks
            - name: N8N_WEBHOOK_URL
              value: https://n8n-logcomex.34-8-101-220.nip.io
            - name: N8N_EDITOR_BASE_URL
              value: https://n8n-logcomex.34-8-101-220.nip.io
            - name: WEBHOOK_URL
              value: https://n8n-logcomex.34-8-101-220.nip.io
            
            # Network
            - name: N8N_PORT
              value: "5678"
            - name: N8N_LISTEN_ADDRESS
              value: 0.0.0.0
            - name: N8N_PUSH_BACKEND
              value: websocket
            - name: N8N_PUSH_BACKEND_WEBSOCKET_HEARTBEAT_INTERVAL
              value: "30000"
          
          image: docker.n8n.io/n8nio/n8n:1.107.3
          name: n8n
          ports:
            - containerPort: 5678
              protocol: TCP
          
          # Recursos otimizados conforme plano
          resources:
            requests:
              cpu: 250m      # 0.25 vCPU por réplica
              memory: 512Mi  # 512Mi RAM por réplica
            limits:
              cpu: 500m      # Limite de 0.5 vCPU
              memory: 1Gi    # Limite de 1GB RAM
          
          # Health checks
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5678
            initialDelaySeconds: 120
            timeoutSeconds: 1
            periodSeconds: 20
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5678
            initialDelaySeconds: 60
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3
          
          volumeMounts:
            - mountPath: /home/node/.n8n
              name: n8n-claim0
      
      # Init container para permissões
      initContainers:
        - name: volume-permissions
          image: busybox:1.36
          command:
            - sh
            - -c
            - chown 1000:1000 /data
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /data
              name: n8n-claim0
      
      volumes:
        - name: n8n-claim0
          persistentVolumeClaim:
            claimName: n8n-claim0
        - name: n8n-secret
          secret:
            secretName: n8n-secret
        - name: postgres-secret
          secret:
            secretName: postgres-secret
